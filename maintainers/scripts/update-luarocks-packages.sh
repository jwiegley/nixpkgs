#!/usr/bin/env nix-shell
#!nix-shell -p 'lua5_2.withPackages(ps: [ ps.cjson ps.luarocks ])' git nix-prefetch-scripts -i sh

# You'll likely want to use
# ``
#   $ ./update-luarocks-packages.sh ../../pkgs/top-level/lua-generated-packages.nix
# ``
# to update all libraries in that folder.

#!  nix-shell -p lua -p lua52Packages.cjson -p git -p nix-prefetch-scripts -i sh -I nixpkgs=/home/teto/nixpkgs2
# for now we need cjson in lua path
# for now lua-cjson isn't properly exported
# set -eu -o pipefail


# TODO we should be able to list manifests
if [ $# -lt 2 ]; then

    echo "Usage: $0 GENERATED_FILENAME"
    exit 1
fi

# NIXPKGS_FOLDER="$HOME/nixpkgs2"
# LUAROCKS_EXE="$HOME/luarocks/src/bin/luarocks"
# ROCKSPEC_FOLDER=$HOME/moonrocks-mirror
GENERATED_NIXFILE="$1"

exit_trap()
{
  local lc="$BASH_COMMAND" rc=$?
  test $rc -eq 0 || echo "*** error $rc: $lc"
}

trap exit_trap EXIT

# cd "$HOME/luarocks/src"

# cd $NIXPKGS_FOLDER
# # TEMPORARY
# # for now we just stash changes instead of hard clean
# # disable for now
# git stash
# # git reset -q --hard
# # git clean -dxf -q
# # git pull -q
# export NIX_PATH=nixpkgs=$PWD
# cd ..

# u can browse rocks here
# https://github.com/luarocks/luarocks/wiki/Browse-rocks
# we might be able to download rocks from
# http://luafr.org/moonrocks/ or
# https://github.com/rocks-moonscript-org/moonrocks-mirror.git
# hackage relied on this repostiory
# https://github.com/commercialhaskell/all-cabal-hashes/commit/$moonrocks.
# cd $ROCKSPEC_FOLDER
# git pull -q
# # rm -f preferred-versions
# # for n in */preferred-versions; do
# #   cat >>preferred-versions "$n"
# #   echo >>preferred-versions
# # done
# # hackage=$(git rev-parse --verify HEAD)
# # used in the commit message
# moonrocks=$(git rev-parse --verify HEAD)
# # cd ..


# cd $NIXPKGS_FOLDER

read -d '' -r HEADER <<'EOM'
/* ${GENERATED_NIXFILE} is an auto-generated file -- DO NOT EDIT!
You can run ${0} ${GENERATED_NIXFILE}
*/
{
# self has buildLuaPackage
self
, stdenv
, fetchurl
, fetchgit
, toLuaModule
, requiredLuaModules
}:
with self;
rec {
EOM

read -d '' -r FOOTER <<'EOM'
}
/* GENERATED */
EOM



# passing arrays is not easy
# expects 2 args
#  - pkgs list
#  - server or ""
function convert_pkgs () {
	local -n pkg_list=$1
	server=""
	# pkg_list=($1)
	if [ ! -z "$2" ]; then
		# echo "adding server"
		server=" --server=$2"
	fi

	# shift
	for pkg in "${pkg_list[@]}"
	do
		echo "looking at $pkg"
		bin/luarocks convert2nix $server "$pkg"
	done
}

# echo "/* ${GENERATED_NIXFILE} is an auto-generated file -- DO NOT EDIT! */" > $NIXPKGS_FOLDER/${GENERATED_NIXFILE}

# todo find difference
declare -a pkg_list_main
declare -a pkg_list_extra
declare -a pkg_lists
pkg_list_main=(
ansicolors # -1.0.2-3
busted # -2.0.rc9-0 # OK
dkjson # -2.5-2 # looks ok
lua-cmsgpack # -0.4.0-0 # looks OK
lua_cliargs # -1.1-1 # OK
luassert # -1.7.9-0 # OK
lua-term # -0.7-1 #
luasocket # -2.0.2-6
ltermbox # -0.2-1 # ok
# mediator_lua # doesnt exist as source yet
luafilesystem # required by penlight
penlight
say # -1.3-1 # builtin type, check how luarocks handles modules
)
# ~/busted-2.0.rc12-1.rockspec
# for f in $(ls $ROCKSPEC_FOLDER)

# basically don't have a src.pack version in
pkg_list_extra=(
mediator_lua
mpack
)
pkg_lists=(
pkg_list_main
pkg_list_extra
)



# to sort only the output
# cat log|LANG=C sort -t $'\t' -k1,1 -u
echo "$HEADER"
# convert_pkgs $pkg_list_main
for $i in $pkg_list[@]; do
    echo $i
    # TODO run the conversion, in case of a certain failure, pack & publish the
    # package
done
# convert_pkgs pkg_list_extra "http://luarocks.org/manifests/teto"
echo "$FOOTER" # close the set

# >> $NIXPKGS_FOLDER/${GENERATED_NIXFILE}
# cabal -v0 new-build hackage2nix
# exe=( dist-newstyle/build/$(uname -m)-$(uname -s | tr '[:upper:]' '[:lower:]')/ghc-$(ghc --numeric-version)/cabal2nix-*/build/hackage2nix/hackage2nix )
# $exe --nixpkgs="$PWD/nixpkgs" +RTS -M4G -RTS

# git add pkgs/development/lua-modules/luarocks-modules.nix
# if [ -n "$(git status --porcelain)" ]; then
#   cat <<EOF | git commit -q -F -
# luarocks-packages.nix: automatic luarocks package set update

# This update was generated by hackage2nix $cabal2nix from Hackage revision
# https://github.com/commercialhaskell/all-cabal-hashes/commit/$moonrocks.
# EOF
#   git push -q
# fi
